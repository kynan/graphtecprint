#!/usr/bin/env python

import fcntl
import sys
import os
import glob


version = "1.2.0"  # based on 1.0.1

# Downscaling factor from paper size (mm*20) to pixels
previewscale = 20

# These appear to be device limits
margintop = 500
marginright = 320

# Format:  ID, speed, force, cap-colour, name
# Non-standard presets must use ID "300".
papertypes = [("100", 10, 27, "yellow", "Card without Craft Paper Backing"),
              ("101", 10, 27, "yellow", "Card with Craft Paper Backing"),
              ("102", 10, 10, "blue", "Vinyl Sticker"),
              ("106", 10, 14, "blue", "Film Labels"),
              ("111", 10, 27, "yellow", "Thick Media"),
              ("112", 10,  2, "blue", "Thin Media"),
              ("113", 10, 10, "pen", "Pen"),
              ("120", 10, 30, "blue", "Bond Paper 13-28 lbs"),
              ("121", 10, 30, "yellow", "Bristol Paper 57-67 lbs"),
              ("122", 10, 30, "yellow", "Cardstock 40-60 lbs"),
              ("123", 10, 30, "yellow", "Cover 40-60 lbs"),
              ("124", 10,  1, "blue", "Film, Double Matte Translucent"),
              ("125", 10,  1, "blue", "Film, Vinyl With Adhesive Back"),
              ("126", 10,  1, "blue", "Film, Window With Kling Adhesive"),
              ("127", 10, 30, "red", "Index 90 lbs"),
              ("128", 10, 20, "yellow", "Inkjet Photo Paper 28-44 lbs"),
              ("129", 10, 27, "red", "Inkjet Photo Paper 45-75 lbs"),
              ("130",  3, 30, "red", "Magnetic Sheet"),
              ("131", 10, 30, "blue", "Offset 24-60 lbs"),
              ("132", 10,  5, "blue", "Print Paper Light Weight"),
              ("133", 10, 25, "yellow", "Print Paper Medium Weight"),
              ("134", 10, 20, "blue", "Sticker Sheet"),
              ("135", 10, 20, "red", "Tag 100 lbs"),
              ("136", 10, 30, "blue", "Text Paper 24-70 lbs"),
              ("137", 10, 30, "yellow", "Vellum Bristol 57-67 lbs"),
              ("138", 10, 30, "blue", "Writing Paper 24-70 lbs")]

# Format: name, width, height
# Sizes are specified in millimeters * 20
papersizes = [("A4 portrait",      4200, 5940),
              ("A4 landscape",     5940, 4200),  # cameo only
              ("A3 portrait",      5940, 8400),  # cameo only
              ("Letter", 4318, 5588)]


open_printer = None

settings = {'printer': 0,
            'orientation': -1,
            'papertype': 6,
            'papersize': 0,
            'cuttingspeed': 10.0,
            'cuttingforce': 10.0,
            'trackenhancing': False}


def getprinterident(file):
    try:
        f = open(file, "r")
    except IOError, (val, msg):
        print "Error opening " + file + ":", val, msg
        if val == 13:
            print "Try running:  sudo chmod a+rw " + file
        return None
    x = fcntl.ioctl(f.fileno(), 0x84005001, '\x00' * 256)
    f.close()
    if not x:
        return None
    l = (ord(x[0]) << 8) | ord(x[1])
    x = x[2:l]
    return x



def readresult(f):
    res = ""
    while True:
        c = f.read(1)
        res = res + c
        if c == '\x03':
            break
    return res


def doit(settings):
    if not printers:
        raise RuntimeError("No printer detected!")
    printer = printers[settings["printer"]]
    print printer
    page = papersizes[settings["papersize"]]
    papertype = papertypes[settings["papertype"]]
    orientation = ["1", "0"][settings["orientation"]]
    cuttingspeed = settings["cuttingspeed"]
    cuttingforce = settings["cuttingforce"]
    trackenhancing = ["0", "1"][settings["trackenhancing"]]

    debug = False

    if debug:
        f = sys.stdout
    else:
        f = open(printer[0], "r+")

    f.write("\x1b\x04")
    f.write("\x1b\x05")

    if not debug:
        res = readresult(f)
        if res != "0\x03":
            print "graphtecprint: Fatal: Error in handshake."
            print "Got res %r, expected 0\\x03." % res
            # FIXME: ignore this error for now, seems not to matter
            # f.close()
            # return 4

    f.write("TT\x03")
    f.write("FG\x03")

    if not debug:
        res = readresult(f)
        if res == 'V5.00    \x03':
            pass  # QuicKutz Silhouette
        elif res == 'V2.11 ALQ\x03':
            pass  # Wishblade
        else:
            print "graphtecprint: Warning: Unexpected version:", repr(res)

    f.write("FW" + str(papertype[0]) + "\x03")
    f.write("!" + str(cuttingspeed) + "\x03")
    f.write("FX" + str(cuttingforce) + ",0\x03")

    f.write("FC18\x03")
    f.write("FY" + trackenhancing + "\x03")
    f.write("FN" + orientation + "\x03")
    f.write("FE0\x03")
    f.write("TB71\x03")

    if not debug:
        res = readresult(f)
        if res != '    0,    0\x03':
            print "graphtecprint: Warning: Unexpected reply:", repr(res)

    f.write("FA\x03")

    f.write("FU" + str(page[2] - margintop) + ","
            + str(page[1] - marginright) + "\x03")
    f.write("FM1\x03")
    f.write("TB50,1\x03")
    f.write("FO" + str(page[2] - margintop) + "\x03")
    f.write("&100,100,100,\\0,0,")
    f.write("Z" + str(page[1]) + "," + str(page[2]) + ",L0,")

    for s in strokes:
        p = s[0]
        f.write("M%.3f,%.3f\x03" % (p[0], p[1]))
        for p in s[1:]:
            f.write("D%.3f,%.3f\x03" % (p[0], p[1]))

    f.write("&1,1,1,TB50,0\x03")
    f.write("FO0\x03")
    f.write("H,")

    if not debug:
        f.close()

    return 0


# Get the data from pstoedit
# DEPRECATED: cannot distinguish color.
def readdata():
    (child_out, child_in) = os.popen2("pstoedit -dt -f pic")
    while True:
        ps = sys.stdin.read()
        if not ps:
            break
        child_out.write(ps)
    child_out.close()

    scale = 2.54 * 200  # from inch to 1/20th mm

    while True:
        line = child_in.readline()
        if not line:
            break
        if line[:10] == "line from ":

            line = line[10:]
            x = line.find(" ")
            if x < 0:
                continue

            p = line[:x].split(",")

            p[0] = float(p[0]) * scale
            p[1] = float(p[1]) * scale

            stroke = [p]

            line = line[x:] + " "  # add an extra space for the find() below

            while line[:4] == " to ":
                line = line[4:]
                x = line.find(" ")
                if x < 0:
                    break

                p = line[:x].split(",")

                p[0] = float(p[0]) * scale
                p[1] = float(p[1]) * scale

                stroke.append(p)

                line = line[x:]

            strokes.append(stroke)
    child_in.close()

    if not strokes:
        print "graphtecprint: Fatal: Nothing to print?"
        sys.exit(2)


# Scan for usable printers
def scanprinters():

    global printers

    printers = []

    for dev in glob.glob("/dev/usb/lp*"):
        id = getprinterident(dev)
        print dev,id
        if not id:
            continue
        params = id.split(";")
        p = {}
        for param in params:
            if not param:
                continue
            k, v = param.split(":", 1)
            p[k] = v

        # Basic sanity checking
        if "CLASS" not in p or p["CLASS"] != "PRINTER":
            continue
        if "MANUFACTURER" not in p:
            continue

        # Testing for the different models
        supported = False
        if p["MANUFACTURER"] == "Graphtec":
            # MANUFACTURER:Graphtec;MODEL:CC200-20;CLASS:PRINTER;DESCRIPTION:Graphtec CC200-20;
            if "MODEL" in p and p["MODEL"] == "CC200-20":
                supported = True
        elif p["MANUFACTURER"] == "Wishblade Inc." or p["MANUFACTURER"] == "WishbladeInc.":
            # MANUFACTURER:Wishblade Inc.;MODEL:WB100-20;CLASS:PRINTER;DESCRIPTION:Wishblade Inc. WB100-20;
            if "MODEL" in p and p["MODEL"] == "WB100-20":
                supported = True
        elif p["MANUFACTURER"] == "Silhouette":
            # MANUFACTURER:Silhouette;MODEL:CAMEO;CLASS:PRINTER;DESCRIPTION:Silhouette CAMEO;
            if "MODEL" in p and p["MODEL"] == "CAMEO":
                supported = True    # almost sure...
        else:
            # Probably not a supported model. Ignore.
            continue

        if not supported:
            print "graphtecprint: Warning: Possibly unsupported model. Will continue anyway."
            print "graphtecprint: Warning: If this model works, please send the following"
            print "graphtecprint: Warning: identification string to vidarino@gmail.com:"
            print "graphtecprint: Warning: " + repr(id)

        try:
            f = open(dev, "r+")
            f.close()
        except IOError:
            p["DESCRIPTION"] = p["DESCRIPTION"] + " (Warning: read-only)"

        printers.append((dev, p))


if __name__ == '__main__':
    printers = []
    strokes = []
    cstrokes = {}
    if False:
        readdata()
    else:
        import gtp_loader
        l = gtp_loader.loader()
        l.load(sys.argv[1] if len(sys.argv) > 1 else sys.stdin)
        for color in l.colors():
            cstrokes[color] = l.strokes(color)
        # old compat ...
        strokes = l.strokes()

    # Scan for printers
    scanprinters()

    sys.exit(doit(settings))
